{"version":3,"sources":["../../src/Logic/Remote/index.js","../../src/util.js","../../src/Logic/Context/index.js"],"names":["applyVariable","spin","className","props","useState","useEffect","setLoading","Promise","resource","data","setData","e","console","setError","status","title","subTitle","error","classnames","variable","$item","escape","value","WrappedComponent","originProps","useGlobalContext","components","emitter","output","extract","Object","key","extractProps","newProps","currentVariable","propsValue","parsedPropsValue","name","path","test","dotIndexList","map","sign","index","dotIndex","Math","parseVariable","functions","newFunction","Function","args","otherContext","content","lib","get","contextFunctions","currentFunctions"],"mappings":"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","file":"static/js/34.93fe3149.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Context from '../Context';\nimport { Spin, Result } from 'antd';\nimport { applyVariable } from '../../util';\nimport classnames from 'classnames';\n\nconst Remote = ({ resource, spin = {}, children, className, ...props }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    Promise.resolve(typeof resource === 'function' ? resource() : null).then((data) => {\n      setData(data);\n    }, (e) => {\n      console.error(e);\n      setError(e.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [resource]);\n  if (loading) {\n    return <Spin {...spin}/>;\n  }\n  if (error) {\n    return <Result status=\"error\" title=\"加载异常\" subTitle={error}/>;\n  }\n\n  return <div {...props} className={classnames(className, 'view-render-remote')}>\n    <Context variable={{ $item: data }}>{children}</Context>\n  </div>;\n};\n\nexport default applyVariable(Remote);","import React, {useEffect} from 'react';\nimport {useGlobalContext, Provider} from './context';\nimport Render from './index';\nimport get from 'lodash/get';\n\nconst escape = (value) => {\n    if (typeof value === 'string' && value.indexOf('\\\\$') === 0) {\n        return value.replace('\\\\$', '$');\n    }\n    return value;\n};\n\nconst parseVariable = (value) => {\n    if (typeof value !== 'string') {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    if (!/[.\\[]/.test(value)) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndexList = ['[', '.'].map((sign) => value.indexOf(sign)).filter((index) => index > -1);\n    if (dotIndexList.length === 0) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndex = Math.min(...dotIndexList);\n    return {\n        name: value.substr(0, dotIndex),\n        path: value.substr(dotIndex).replace(/^\\./, '')\n    };\n};\n\nexport const extractProps = (props = {}) => {\n    const output = {\n        props: {}, extract: {}\n    };\n    Object.keys(props).forEach((key) => {\n        if (key.charAt(0) === '$') {\n            output.extract[key] = props[key];\n        } else {\n            output.props[escape(key)] = props[key];\n        }\n    });\n\n    return output;\n};\n\nexport const applyVariable = (WrappedComponent) => {\n    return (originProps) => {\n        const {variable, functions, components, ...otherContext} = useGlobalContext();\n        const {emitter} = otherContext;\n        const {props, extract} = extractProps(originProps);\n        const newProps = {}, currentVariable = Object.assign({}, variable, extract);\n        Object.keys(props).forEach((key) => {\n            const propsValue = props[key], parsedPropsValue = parseVariable(props[key]);\n\n            if (currentVariable.hasOwnProperty(propsValue)) {\n                newProps[key] = currentVariable[propsValue];\n                return;\n            }\n\n            if (currentVariable.hasOwnProperty(parsedPropsValue.name)) {\n                newProps[key] = get(currentVariable[parsedPropsValue.name], parsedPropsValue.path);\n                return;\n            }\n\n            if (functions.hasOwnProperty(propsValue)) {\n                if (typeof functions[propsValue] === 'string') {\n                    newProps[key] = (...args) => {\n                        const newFunction = new Function('args', 'variable', 'functions', 'lib', functions[propsValue]);\n                        return newFunction(args, currentVariable, functions, otherContext.lib);\n                    };\n                    return;\n                }\n                if (typeof functions[propsValue] === 'function') {\n                    newProps[key] = functions[propsValue];\n                    return;\n                }\n                return;\n            }\n\n            if (components.hasOwnProperty(propsValue)) {\n                newProps[key] =\n                    <Render content={components[propsValue]} lib={otherContext.lib} emitter={otherContext.emitter}/>;\n                return;\n            }\n\n            newProps[key] = escape(propsValue);\n        });\n        useEffect(() => {\n            emitter && emitter.emit('component-appended', currentVariable.$id);\n            return () => {\n                emitter && emitter.emit('component-removed', currentVariable.$id);\n            };\n        }, [emitter]);\n        if (Object.keys(extract).length > 0) {\n            return <Provider\n                value={Object.assign({}, otherContext, {functions, components, variable: currentVariable})}>\n                <WrappedComponent {...newProps}/>\n            </Provider>;\n        }\n        return <WrappedComponent {...newProps}/>;\n    };\n};","import React from 'react';\nimport { Provider, useGlobalContext } from '../../context';\nimport { applyVariable } from '../../util';\n\nconst Context = ({ children, functions, variable }) => {\n  const { variable: contextVariable, functions: contextFunctions, ...otherContext } = useGlobalContext();\n  const currentVariable = Object.assign({}, contextVariable, variable);\n  const currentFunctions = Object.assign({}, contextFunctions, functions);\n  return <Provider value={Object.assign({}, otherContext, { variable: currentVariable, functions: currentFunctions })}>\n    {children}\n  </Provider>;\n};\n\nexport default applyVariable(Context);"],"sourceRoot":""}