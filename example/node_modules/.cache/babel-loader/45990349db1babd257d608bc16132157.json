{"ast":null,"code":"import { useRef, useCallback, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\n\nexport default function useDebouncedCallback(func, wait, options) {\n  var _this = this;\n\n  var lastCallTime = useRef(null);\n  var lastInvokeTime = useRef(0);\n  var timerId = useRef(null);\n  var lastArgs = useRef([]);\n  var lastThis = useRef();\n  var result = useRef();\n  var funcRef = useRef(func);\n  var mounted = useRef(true);\n  funcRef.current = func; // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n\n  var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n  var leading = !!options.leading;\n  var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n\n  var maxing = ('maxWait' in options);\n  var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n  var invokeFunc = useCallback(function (time) {\n    var args = lastArgs.current;\n    var thisArg = lastThis.current;\n    lastArgs.current = lastThis.current = null;\n    lastInvokeTime.current = time;\n    return result.current = funcRef.current.apply(thisArg, args);\n  }, []);\n  var startTimer = useCallback(function (pendingFunc, wait) {\n    if (useRAF) cancelAnimationFrame(timerId.current);\n    timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n  }, [useRAF]);\n  var shouldInvoke = useCallback(function (time) {\n    if (!mounted.current) return false;\n    var timeSinceLastCall = time - lastCallTime.current;\n    var timeSinceLastInvoke = time - lastInvokeTime.current; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return !lastCallTime.current || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }, [maxWait, maxing, wait]);\n  var trailingEdge = useCallback(function (time) {\n    timerId.current = null; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs.current) {\n      return invokeFunc(time);\n    }\n\n    lastArgs.current = lastThis.current = null;\n    return result.current;\n  }, [invokeFunc, trailing]);\n  var timerExpired = useCallback(function () {\n    var time = Date.now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // https://github.com/xnimorz/use-debounce/issues/97\n\n\n    if (!mounted.current) {\n      return;\n    } // Remaining wait calculation\n\n\n    var timeSinceLastCall = time - lastCallTime.current;\n    var timeSinceLastInvoke = time - lastInvokeTime.current;\n    var timeWaiting = wait - timeSinceLastCall;\n    var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting; // Restart the timer\n\n    startTimer(timerExpired, remainingWait);\n  }, [maxWait, maxing, shouldInvoke, startTimer, trailingEdge, wait]);\n  var cancel = useCallback(function () {\n    if (timerId.current) {\n      useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n    }\n\n    lastInvokeTime.current = 0;\n    lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n  }, [useRAF]);\n  var flush = useCallback(function () {\n    return !timerId.current ? result.current : trailingEdge(Date.now());\n  }, [trailingEdge]);\n  useEffect(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  var debounced = useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var time = Date.now();\n    var isInvoking = shouldInvoke(time);\n    lastArgs.current = args;\n    lastThis.current = _this;\n    lastCallTime.current = time;\n\n    if (isInvoking) {\n      if (!timerId.current && mounted.current) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime.current = lastCallTime.current; // Start the timer for the trailing edge.\n\n        startTimer(timerExpired, wait); // Invoke the leading edge.\n\n        return leading ? invokeFunc(lastCallTime.current) : result.current;\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        startTimer(timerExpired, wait);\n        return invokeFunc(lastCallTime.current);\n      }\n    }\n\n    if (!timerId.current) {\n      startTimer(timerExpired, wait);\n    }\n\n    return result.current;\n  }, [invokeFunc, leading, maxing, shouldInvoke, startTimer, timerExpired, wait]);\n  var pending = useCallback(function () {\n    return !!timerId.current;\n  }, []);\n  var debouncedState = useMemo(function () {\n    return {\n      callback: debounced,\n      cancel: cancel,\n      flush: flush,\n      pending: pending\n    };\n  }, [debounced, cancel, flush, pending]);\n  return debouncedState;\n}","map":{"version":3,"sources":["/Users/linzhipeng/Documents/code_cloud/@kne/react-view-render/node_modules/use-debounce/esm/useDebouncedCallback.js"],"names":["useRef","useCallback","useEffect","useMemo","useDebouncedCallback","func","wait","options","_this","lastCallTime","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","useRAF","window","TypeError","leading","trailing","maxing","maxWait","Math","max","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","cancel","clearTimeout","flush","debounced","_i","arguments","length","isInvoking","pending","debouncedState","callback"],"mappings":"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","sourcesContent":["import { useRef, useCallback, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    var invokeFunc = useCallback(function (time) {\n        var args = lastArgs.current;\n        var thisArg = lastThis.current;\n        lastArgs.current = lastThis.current = null;\n        lastInvokeTime.current = time;\n        return (result.current = funcRef.current.apply(thisArg, args));\n    }, []);\n    var startTimer = useCallback(function (pendingFunc, wait) {\n        if (useRAF)\n            cancelAnimationFrame(timerId.current);\n        timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n    }, [useRAF]);\n    var shouldInvoke = useCallback(function (time) {\n        if (!mounted.current)\n            return false;\n        var timeSinceLastCall = time - lastCallTime.current;\n        var timeSinceLastInvoke = time - lastInvokeTime.current;\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (!lastCallTime.current ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }, [maxWait, maxing, wait]);\n    var trailingEdge = useCallback(function (time) {\n        timerId.current = null;\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs.current) {\n            return invokeFunc(time);\n        }\n        lastArgs.current = lastThis.current = null;\n        return result.current;\n    }, [invokeFunc, trailing]);\n    var timerExpired = useCallback(function () {\n        var time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        // https://github.com/xnimorz/use-debounce/issues/97\n        if (!mounted.current) {\n            return;\n        }\n        // Remaining wait calculation\n        var timeSinceLastCall = time - lastCallTime.current;\n        var timeSinceLastInvoke = time - lastInvokeTime.current;\n        var timeWaiting = wait - timeSinceLastCall;\n        var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n        // Restart the timer\n        startTimer(timerExpired, remainingWait);\n    }, [maxWait, maxing, shouldInvoke, startTimer, trailingEdge, wait]);\n    var cancel = useCallback(function () {\n        if (timerId.current) {\n            useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n        }\n        lastInvokeTime.current = 0;\n        lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n    }, [useRAF]);\n    var flush = useCallback(function () {\n        return !timerId.current ? result.current : trailingEdge(Date.now());\n    }, [trailingEdge]);\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    var debounced = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var time = Date.now();\n        var isInvoking = shouldInvoke(time);\n        lastArgs.current = args;\n        lastThis.current = _this;\n        lastCallTime.current = time;\n        if (isInvoking) {\n            if (!timerId.current && mounted.current) {\n                // Reset any `maxWait` timer.\n                lastInvokeTime.current = lastCallTime.current;\n                // Start the timer for the trailing edge.\n                startTimer(timerExpired, wait);\n                // Invoke the leading edge.\n                return leading ? invokeFunc(lastCallTime.current) : result.current;\n            }\n            if (maxing) {\n                // Handle invocations in a tight loop.\n                startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime.current);\n            }\n        }\n        if (!timerId.current) {\n            startTimer(timerExpired, wait);\n        }\n        return result.current;\n    }, [invokeFunc, leading, maxing, shouldInvoke, startTimer, timerExpired, wait]);\n    var pending = useCallback(function () {\n        return !!timerId.current;\n    }, []);\n    var debouncedState = useMemo(function () { return ({\n        callback: debounced,\n        cancel: cancel,\n        flush: flush,\n        pending: pending,\n    }); }, [debounced, cancel, flush, pending]);\n    return debouncedState;\n}\n"]},"metadata":{},"sourceType":"module"}