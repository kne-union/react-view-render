{"version":3,"sources":["../../src/components/Iconfont.js","../../src/components/LoadingButton.js","../../src/General/Icon/index.js"],"names":["calculateSize","size","test","Iconfont","type","colorful","className","style","prefix","other","fontClass","prefixType","calculateType","computedClassName","classnames","computedStyle","Object","fontSize","xlinkHref","PropTypes","string","applyVariable"],"mappings":"6RAIMA,G,yBAAgB,SAAAC,GAIlB,MAHI,mBAAmBC,KAAKD,EAA5B,cACIA,SAEJ,IAOEE,EAAW,SAAC,GAAsE,QAApEC,YAAoE,MAA7D,GAA6D,EAAzDC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,UAAWL,EAAoC,EAApCA,KAAMM,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAWC,EAAY,+DAC9EC,EALY,SAACC,EAAYH,EAAQH,GACvC,OAAQG,OAAiBH,EAAW,cAA5BG,QAAD,GAAP,EAIkBI,CAAcR,EAAMI,EAAtC,GACIK,EAAoBC,IAAW,EAE3B,CACI,gBADJ,EAEI,sBAAuBT,GALnC,GASIU,EAAgBC,OAAA,YAAyBf,EAAO,CAAEgB,SAAUjB,EAAcC,IAT9E,IAUA,OAAOI,EACH,kCAAgBC,UAAhB,EAA8CC,MAAOQ,IACjD,yBAAKG,UAAS,iBAGlB,gCAAcZ,UAAd,EAA4CC,MAAOQ,MAI3DZ,eAAwB,CACpBE,UADoB,EAEpBG,OAAQ,aAGZL,YAAqB,CACjBE,SAAUc,IADO,KAEjBX,OAAQW,IAFS,OAGjBlB,KAAMkB,cAAoB,CAACA,IAAD,OAAmBA,IAH5B,SAIjBf,KAAMe,WAJW,WAKjBZ,MAAOY,IALU,OAMjBb,UAAWa,IAAUC,Q,sCC3CzB,ICAA,EAAeC,YAAf","file":"static/js/25.d32d29f2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst calculateSize = size => {\n    if (/^[1-9]+[0-9]*]*$/.test(size.toString())) {\n        size += 'px';\n    }\n    return size;\n};\n\nconst calculateType = (prefixType, prefix, colorful) => {\n    return (prefix === '' ? (colorful ? 'icon-color-' : 'icon-') : prefix) + prefixType;\n};\n\nconst Iconfont = ({ type = '', colorful, className, size, style, prefix, ...other }) => {\n    const fontClass = calculateType(type, prefix, colorful),\n        computedClassName = classnames(\n            className,\n            {\n                'ant-iconfont': !colorful,\n                'ant-iconfont--color': colorful\n            },\n            fontClass\n        ),\n        computedStyle = Object.assign({}, style, size ? { fontSize: calculateSize(size) } : {});\n    return colorful ? (\n        <svg {...other} className={computedClassName} style={computedStyle}>\n            <use xlinkHref={`#${fontClass}`} />\n        </svg>\n    ) : (\n        <i {...other} className={computedClassName} style={computedStyle} />\n    );\n};\n\nIconfont.defaultProps = {\n    colorful: false,\n    prefix: 'iconfont '\n};\n\nIconfont.propTypes = {\n    colorful: PropTypes.bool,\n    prefix: PropTypes.string,\n    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    type: PropTypes.string.isRequired,\n    style: PropTypes.object,\n    className: PropTypes.string\n};\n\nexport default Iconfont;\n","import React, { useState } from 'react';\nimport { Button } from 'antd';\n\nexport default ({ onClick, ...props }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  return <Button {...props} loading={isLoading} onClick={(...args) => {\n    setIsLoading(true);\n    Promise.resolve(onClick && onClick(...args)).then(() => {\n      setIsLoading(false);\n    });\n  }}/>;\n};\n","import { applyVariable } from '../../util';\nimport { Iconfont } from '@kne/antd-enhance';\n\nexport default applyVariable(Iconfont);\n"],"sourceRoot":""}