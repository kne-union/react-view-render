{"version":3,"sources":["../../src/Logic/List/index.js","../../src/Logic/Context/index.js"],"names":["applyVariable","map","value","empty","className","props","classnames","resource","$item","$index","index","item","variable","useGlobalContext","contextFunctions","functions","currentVariable","Object","currentFunctions"],"mappings":"+UAkBA,EAAeA,aAbF,SAAC,SAAoF,EAApF,WAAoF,EAAzEC,WAAX,MAAkBC,YAAD,OAAjB,OAAoF,EAAjDC,aAAnC,eAAoF,EAApF,SAA2DC,EAAyB,EAAzBA,UAAcC,EAAW,iBAC9F,OAAO,0CACKD,UAAWE,IAAWF,EAAW,sBAAsB,KAACG,GAAD,cAAyCA,GAAD,SAAqB,cAC5H,IAAMF,EAAQJ,EAAI,CAACO,MAAD,EAAcC,OAAQC,IACxC,OAAO,kBAAwBC,YAC3B,SAGO,uBAASC,SAAUP,GAA1B,GAFI,a,0HCEhB,EAAeL,aATC,SAAC,GAAsC,IAAtC,EAAsC,EAAtC,WAAsC,EAAtC,UAAuBY,EAAe,EAAfA,SACtC,EAAoFC,cAA9E,EAAN,EAAQD,SAAsCE,EAA9C,EAAmCC,UAAnC,mBACMC,EAAkBC,mBAAxB,GACMC,EAAmBD,mBAAzB,GACA,OAAO,uBAAUf,MAAOe,OAAA,YAAgC,CAAEL,SAAF,EAA6BG,UAAWG,KAAhG","file":"static/js/23.af3702d7.chunk.js","sourcesContent":["import React, {Children} from 'react';\nimport Context from '../Context';\nimport classnames from 'classnames';\nimport {applyVariable} from '../../util';\n\nconst List = ({resource, map = (value) => value, empty = null, children, className, ...props}) => {\n    return <div {...props}\n                className={classnames(className, 'view-render-list')}>{(resource || []).length === 0 ? empty : (resource || []).map((item, index) => {\n        const props = map({$item: item, $index: index});\n        return Children.map(children, (item) => {\n            if (!item) {\n                return item;\n            }\n            return <Context variable={props}>{children}</Context>;\n        });\n    })}</div>;\n};\n\nexport default applyVariable(List);","import React from 'react';\nimport { Provider, useGlobalContext } from '../../context';\nimport { applyVariable } from '../../util';\n\nconst Context = ({ children, functions, variable }) => {\n  const { variable: contextVariable, functions: contextFunctions, ...otherContext } = useGlobalContext();\n  const currentVariable = Object.assign({}, contextVariable, variable);\n  const currentFunctions = Object.assign({}, contextFunctions, functions);\n  return <Provider value={Object.assign({}, otherContext, { variable: currentVariable, functions: currentFunctions })}>\n    {children}\n  </Provider>;\n};\n\nexport default applyVariable(Context);"],"sourceRoot":""}