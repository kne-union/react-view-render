{"version":3,"sources":["../../src/Form/GroupList/index.js","../../src/util.js","../../src/Form/fieldDecorator.js","../../src/Logic/Context/index.js"],"names":["_GroupList","fieldDecorator","empty","props","ref","useRef","className","wrappedClassName","functions","$onAdd","variable","$groupList","name","onRemove","$key","key","$onRemove","escape","value","applyVariable","WrappedComponent","originProps","useGlobalContext","components","emitter","output","extract","Object","extractProps","newProps","currentVariable","propsValue","parsedPropsValue","path","test","dotIndexList","map","sign","index","dotIndex","Math","parseVariable","newFunction","Function","args","otherContext","content","lib","get","useEffect","compose","contextFunctions","currentFunctions"],"mappings":"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","file":"static/js/21.37c81807.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport Context from '../../Logic/Context';\nimport {GroupList} from '@kne/react-form-antd';\nimport fieldDecorator from '../fieldDecorator';\n\nconst _GroupList = fieldDecorator(({title, name, wrappedClassName, children, groupItem, empty, ...props}) => {\n    const ref = useRef(null);\n    return <div {...props} className={wrappedClassName}>\n        <Context functions={{$onAdd: (...args) => ref.current.onAdd(...args)}} variable={{\n            $groupList: <GroupList ref={ref} name={name} empty={empty}>\n                {(key, {onAdd, onRemove}) => {\n                    return <Context variable={{$key: key}} functions={{$onAdd: onAdd, $onRemove: () => onRemove(key)}}>\n                        {groupItem}\n                    </Context>;\n                }}\n            </GroupList>\n        }}>\n            {children}\n        </Context>\n    </div>\n});\n\nexport default _GroupList;","import React, {useEffect} from 'react';\nimport {useGlobalContext, Provider} from './context';\nimport Render from './index';\nimport get from 'lodash/get';\n\nconst escape = (value) => {\n    if (typeof value === 'string' && value.indexOf('\\\\$') === 0) {\n        return value.replace('\\\\$', '$');\n    }\n    return value;\n};\n\nconst parseVariable = (value) => {\n    if (typeof value !== 'string') {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    if (!/[.\\[]/.test(value)) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndexList = ['[', '.'].map((sign) => value.indexOf(sign)).filter((index) => index > -1);\n    if (dotIndexList.length === 0) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndex = Math.min(...dotIndexList);\n    return {\n        name: value.substr(0, dotIndex),\n        path: value.substr(dotIndex).replace(/^\\./, '')\n    };\n};\n\nexport const extractProps = (props = {}) => {\n    const output = {\n        props: {}, extract: {}\n    };\n    Object.keys(props).forEach((key) => {\n        if (key.charAt(0) === '$') {\n            output.extract[key] = props[key];\n        } else {\n            output.props[escape(key)] = props[key];\n        }\n    });\n\n    return output;\n};\n\nexport const applyVariable = (WrappedComponent) => {\n    return (originProps) => {\n        const {variable, functions, components, ...otherContext} = useGlobalContext();\n        const {emitter} = otherContext;\n        const {props, extract} = extractProps(originProps);\n        const newProps = {}, currentVariable = Object.assign({}, variable, extract);\n        Object.keys(props).forEach((key) => {\n            const propsValue = props[key], parsedPropsValue = parseVariable(props[key]);\n\n            if (currentVariable.hasOwnProperty(propsValue)) {\n                newProps[key] = currentVariable[propsValue];\n                return;\n            }\n\n            if (currentVariable.hasOwnProperty(parsedPropsValue.name)) {\n                newProps[key] = get(currentVariable[parsedPropsValue.name], parsedPropsValue.path);\n                return;\n            }\n\n            if (functions.hasOwnProperty(propsValue)) {\n                if (typeof functions[propsValue] === 'string') {\n                    newProps[key] = (...args) => {\n                        const newFunction = new Function('args', 'variable', 'functions', 'lib', functions[propsValue]);\n                        return newFunction(args, currentVariable, functions, otherContext.lib);\n                    };\n                    return;\n                }\n                if (typeof functions[propsValue] === 'function') {\n                    newProps[key] = functions[propsValue];\n                    return;\n                }\n                return;\n            }\n\n            if (components.hasOwnProperty(propsValue)) {\n                newProps[key] =\n                    <Render content={components[propsValue]} lib={otherContext.lib} emitter={otherContext.emitter}/>;\n                return;\n            }\n\n            newProps[key] = escape(propsValue);\n        });\n        useEffect(() => {\n            emitter && emitter.emit('component-appended', currentVariable.$id);\n            return () => {\n                emitter && emitter.emit('component-removed', currentVariable.$id);\n            };\n        }, [emitter]);\n        if (Object.keys(extract).length > 0) {\n            return <Provider\n                value={Object.assign({}, otherContext, {functions, components, variable: currentVariable})}>\n                <WrappedComponent {...newProps}/>\n            </Provider>;\n        }\n        return <WrappedComponent {...newProps}/>;\n    };\n};","import React from 'react';\nimport { applyVariable } from '../util';\nimport compose from '@kne/compose';\n\nconst fieldDecorator = compose(applyVariable, (WrappedComponent) => {\n  return ({ className, ...props }) => {\n    return <WrappedComponent {...props} wrappedClassName={className}/>;\n  };\n});\n\nexport default fieldDecorator;","import React from 'react';\nimport { Provider, useGlobalContext } from '../../context';\nimport { applyVariable } from '../../util';\n\nconst Context = ({ children, functions, variable }) => {\n  const { variable: contextVariable, functions: contextFunctions, ...otherContext } = useGlobalContext();\n  const currentVariable = Object.assign({}, contextVariable, variable);\n  const currentFunctions = Object.assign({}, contextFunctions, functions);\n  return <Provider value={Object.assign({}, otherContext, { variable: currentVariable, functions: currentFunctions })}>\n    {children}\n  </Provider>;\n};\n\nexport default applyVariable(Context);"],"sourceRoot":""}