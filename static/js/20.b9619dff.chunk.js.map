{"version":3,"sources":["../../src/Logic/State/index.js","../../src/Logic/Context/index.js"],"names":["applyVariable","className","props","useState","$setState","setStateName","classnames","variable","$item","state","functions","setState","useGlobalContext","contextFunctions","currentVariable","Object","currentFunctions","value"],"mappings":"kWAaA,EAAeA,aARD,SAAC,SAA+D,EAA/D,YAA+D,EAA/D,eAA+D,EAA/D,SAAqCC,EAA0B,EAA1BA,UAAcC,EAAY,iBAC5E,EAA0BC,mBAA1B,sBAAM,EAAN,KAAM,EAAN,KACMC,EAAYC,EAAgBA,qBAAiD,IAArD,EAA9B,YACA,OAAO,0CAAgBJ,UAAWK,IAAWL,EAAW,uBACtD,uBAASM,SAAU,CAAEC,MAAOC,GAASC,UAAS,eAAI,EAAaC,IADjE,Q,0HCKF,EAAeX,aATC,SAAC,GAAsC,IAAtC,EAAsC,EAAtC,WAAsC,EAAtC,UAAuBO,EAAe,EAAfA,SACtC,EAAoFK,cAA9E,EAAN,EAAQL,SAAsCM,EAA9C,EAAmCH,UAAnC,mBACMI,EAAkBC,mBAAxB,GACMC,EAAmBD,mBAAzB,GACA,OAAO,uBAAUE,MAAOF,OAAA,YAAgC,CAAER,SAAF,EAA6BG,UAAWM,KAAhG","file":"static/js/20.b9619dff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Context from '../Context';\nimport { applyVariable } from '../../util';\nimport classnames from 'classnames';\n\nconst State = ({ initValue, setStateName, children, className, ...props }) => {\n  const [state, setState] = useState(initValue);\n  const $setState = setStateName ? (setStateName.indexOf('$') === 0 ? setStateName : '$' + setStateName) : '$setState';\n  return <div {...props} className={classnames(className, 'view-render-state')}>\n    <Context variable={{ $item: state }} functions={{ [$setState]: setState }}>{children}</Context>\n  </div>;\n};\n\nexport default applyVariable(State);","import React from 'react';\nimport { Provider, useGlobalContext } from '../../context';\nimport { applyVariable } from '../../util';\n\nconst Context = ({ children, functions, variable }) => {\n  const { variable: contextVariable, functions: contextFunctions, ...otherContext } = useGlobalContext();\n  const currentVariable = Object.assign({}, contextVariable, variable);\n  const currentFunctions = Object.assign({}, contextFunctions, functions);\n  return <Provider value={Object.assign({}, otherContext, { variable: currentVariable, functions: currentFunctions })}>\n    {children}\n  </Provider>;\n};\n\nexport default applyVariable(Context);"],"sourceRoot":""}