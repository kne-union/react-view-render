{"version":3,"sources":["../../src/General/Text/index.js","../../src/util.js"],"names":["Text","content","props","applyVariable","escape","value","WrappedComponent","originProps","useGlobalContext","components","emitter","output","extract","Object","key","extractProps","currentVariable","newProps","target","transformProps","propsValue","parsedPropsValue","name","path","test","dotIndexList","map","sign","index","dotIndex","Math","parseVariable","get","functions","parseFunction","funcKey","variable","lib","func","newFunction","Function","others","omit","args","otherContext","url","isPlainObject","isValidElement","newTarget","Array","item","useEffect"],"mappings":"uRAGMA,EAAO,SAAC,OAAEC,EAAwB,EAAxBA,QAAYC,EAAY,iBACtC,OACE,2BADF,IAOFF,eAAoB,CAClBC,QAAS,kCAGX,MAAeE,YAAf,I,qMCRMC,EAAUC,YACZ,MAAqB,kBAAVA,GAAX,IAAiCA,iBACtBA,gBAAP,KAEJ,GA6CSF,EAAiBG,YAC1B,OAAQC,YACJ,MAA2DC,cAArD,EAAN,EAAM,WAAN,EAAM,UAAsBC,EAA5B,EAA4BA,WAA5B,mBACOC,EAAP,EAAOA,QACP,EAnBoB,WAAgB,IAAfR,EAAe,uDAAhB,GAClBS,EAAS,CACXT,MADW,GACAU,QAAS,IAUxB,OARAC,wBAA4BC,YACxB,MAAIA,YACAH,aAAsBT,EAAtBS,GAEAA,QAAaP,EAAbO,IAA4BT,EAA5BS,MAIR,EAO6BI,CAAzB,GAAM,EAAN,EAAM,MAAQH,EAAd,EAAcA,QACRI,EAAkBH,mBAAxB,GA6DMI,EA3DkBC,SAAlBC,EAAkBD,GACpB,qBAAWA,EAAqB,CAC5B,IAAME,EAAN,EAA2BC,EAnDpBhB,YACnB,qBAAWA,EACP,MAAO,CACHiB,KADG,EAEHC,KAAM,IAGd,IAAK,QAAQC,KAAb,GACI,MAAO,CACHF,KADG,EAEHC,KAAM,IAGd,IAAME,EAAe,CAAC,IAAK,KAAKC,KAAKC,YAAD,OAAUtB,UAAzB,cAAsDuB,YAAD,OAAWA,GAArF,KACA,OAAIH,SACA,MAAO,CACHH,KADG,EAEHC,KAAM,IAGd,IAAMM,EAAWC,oBAAI,YAArB,IACA,MAAO,CACHR,KAAMjB,WADH,GAEHkB,KAAMlB,+BA4BgD0B,CAA9C,GACA,GAAIf,iBAAJ,GACI,OAAOA,EAAP,GAEJ,GAAIA,iBAA+BK,EAAnC,MACI,OAAOW,IAAIhB,EAAgBK,EAAjB,MAAyCA,EAAnD,MAEJ,GAAIY,iBAAJ,GAA0C,CAqBtC,OApBsB,SAAhBC,EAAiBC,EAASC,EAAUH,EAAWI,GACjD,IAAMC,EAAOL,EAAb,GACA,wBAAWK,EACA,WACH,IAAMC,EAAc,IAAIC,SAAS,OAAQ,WAAY,YAAa,MAAlE,GACMC,EAASC,IAAKT,EAApB,GAAyCtB,EAAzC,GAEAE,wBAA6BC,YACzBH,KAAcuB,EAAcpB,EAAKsB,EAAUK,EAA3C9B,MALY,2BAAb,EAAa,yBAAb,EAAa,gBAQhB,OAAO4B,EAAYI,EAAMP,EAAUzB,EAAnC,IAGR,oBAAW2B,EACP,OADJ,EAMGJ,CAAcd,EAAD,IAAsCwB,EAA1D,KAEJ,GAAInC,iBAAJ,GAA2C,CACvC,qBAAWA,EAAP,GACA,OAAO,uBAAQR,QAASQ,EAAjB,GAAyC4B,IAAKO,EAA9C,IACQlC,QAASkC,EAAalC,UAEzC,qBAAWD,EAAP,GACA,OAAO,mCAAQoC,IAAKpC,EAAb,GAAqC4B,IAAKO,EAA1C,IACQlC,QAASkC,EAAalC,SAAakC,EADlD,cAIR,OAAOxC,EAAP,GAEJ,GAAI0C,SAA0BC,yBAA9B,GAAsD,CAClD,IAAMC,EAAN,GAIA,OAHAnC,wBAA6BC,YACzBkC,KAAiB7B,EAAeD,EAAhC8B,OAEJ,EAEJ,OAAIC,cAAJ,GACW/B,EAAA,KAAYgC,YACf,OAAO/B,EAAP,MAGR,EAGaA,CAAjB,GAQA,OANAgC,qBAAU,WAEN,OADAzC,GAAWA,4BAAmCM,EAA9CN,KACO,WACHA,GAAWA,2BAAkCM,EAA7CN,QAEL,CALHyC,IAMItC,sBAAJ,EACW,uBACHR,MAAOQ,OAAA,YAAgC,CAACoB,YAAWxB,aAAY2B,SAAUpB,KACzE,oBAFJ,IAKG,oBAAP","file":"static/js/38.8ef9a15d.chunk.js","sourcesContent":["import React from 'react';\nimport { applyVariable } from '../../util';\n\nconst Text = ({ content, ...props }) => {\n  return (\n    <span {...props}>\n      {content}\n    </span>\n  );\n};\n\nText.defaultProps = {\n  content: '请输入内容'\n};\n\nexport default applyVariable(Text);","import React, {useEffect, isValidElement} from 'react';\nimport {useGlobalContext, Provider} from './context';\nimport Render from './index';\nimport get from 'lodash/get';\nimport isPlainObject from 'lodash/isPlainObject';\nimport omit from 'lodash/omit';\n\nconst escape = (value) => {\n    if (typeof value === 'string' && value.indexOf('\\\\$') === 0) {\n        return value.replace('\\\\$', '$');\n    }\n    return value;\n};\n\nconst parseVariable = (value) => {\n    if (typeof value !== 'string') {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    if (!/[.\\[]/.test(value)) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndexList = ['[', '.'].map((sign) => value.indexOf(sign)).filter((index) => index > -1);\n    if (dotIndexList.length === 0) {\n        return {\n            name: value,\n            path: ''\n        };\n    }\n    const dotIndex = Math.min(...dotIndexList);\n    return {\n        name: value.substr(0, dotIndex),\n        path: value.substr(dotIndex).replace(/^\\./, '')\n    };\n};\n\nexport const extractProps = (props = {}) => {\n    const output = {\n        props: {}, extract: {}\n    };\n    Object.keys(props).forEach((key) => {\n        if (key.charAt(0) === '$') {\n            output.extract[key] = props[key];\n        } else {\n            output.props[escape(key)] = props[key];\n        }\n    });\n\n    return output;\n};\n\nexport const applyVariable = (WrappedComponent) => {\n    return (originProps) => {\n        const {variable, functions, components, ...otherContext} = useGlobalContext();\n        const {emitter} = otherContext;\n        const {props, extract} = extractProps(originProps);\n        const currentVariable = Object.assign({}, variable, extract);\n\n        const transformProps = (target) => {\n            if (typeof target === 'string') {\n                const propsValue = target, parsedPropsValue = parseVariable(target);\n                if (currentVariable.hasOwnProperty(propsValue)) {\n                    return currentVariable[propsValue];\n                }\n                if (currentVariable.hasOwnProperty(parsedPropsValue.name)) {\n                    return get(currentVariable[parsedPropsValue.name], parsedPropsValue.path);\n                }\n                if (functions.hasOwnProperty(propsValue)) {\n                    const parseFunction = (funcKey, variable, functions, lib) => {\n                        const func = functions[funcKey];\n                        if (typeof func === 'string') {\n                            return (...args) => {\n                                const newFunction = new Function('args', 'variable', 'functions', 'lib', func);\n                                const others = omit(functions, funcKey), output = {};\n\n                                Object.keys(others).forEach((key) => {\n                                    output[key] = parseFunction(key, variable, others, lib);\n                                });\n\n                                return newFunction(args, variable, output, lib);\n                            }\n                        }\n                        if (typeof func === 'function') {\n                            return func;\n                        }\n                        return;\n                    };\n\n                    return parseFunction(propsValue,currentVariable,functions,otherContext.lib);\n                }\n                if (components.hasOwnProperty(propsValue)) {\n                    if (typeof components[propsValue] === \"object\") {\n                        return <Render content={components[propsValue]} lib={otherContext.lib}\n                                       emitter={otherContext.emitter}/>;\n                    }\n                    if (typeof components[propsValue] === \"string\") {\n                        return <Render url={components[propsValue]} lib={otherContext.lib}\n                                       emitter={otherContext.emitter} {...otherContext.renderProps}/>;\n                    }\n                }\n                return escape(propsValue);\n            }\n            if (isPlainObject(target) && !isValidElement(target)) {\n                const newTarget = {};\n                Object.keys(target).forEach((key) => {\n                    newTarget[key] = transformProps(target[key]);\n                });\n                return newTarget;\n            }\n            if (Array.isArray(target)) {\n                return target.map((item) => {\n                    return transformProps(item);\n                });\n            }\n            return target;\n        };\n\n        const newProps = transformProps(props);\n\n        useEffect(() => {\n            emitter && emitter.emit('component-appended', currentVariable.$id);\n            return () => {\n                emitter && emitter.emit('component-removed', currentVariable.$id);\n            };\n        }, [emitter]);\n        if (Object.keys(extract).length > 0) {\n            return <Provider\n                value={Object.assign({}, otherContext, {functions, components, variable: currentVariable})}>\n                <WrappedComponent {...newProps}/>\n            </Provider>;\n        }\n        return <WrappedComponent {...newProps}/>;\n    };\n};"],"sourceRoot":""}